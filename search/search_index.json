{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Auguri Docs \u00b6 This is the documentation for project Auguri . Install \u00b6 Access permission to Auguri source code is required. git clone git@github.com:Auguri/auguri.git pip install ./auguri Basic Usages \u00b6 import auguri # helper functions in auguri.crypto and auguri.equity symbols = auguri . equity . get_symbols () exchanges = auguri . equity . get_exchanges () # core class auguri.Ticker provides many data acquisition methods ticker = auguri . Ticker ( 'AAPL' ) history = ticker . history () Code References \u00b6 Crypto Equity Ticker License \u00b6 This project is licensed under the terms of the MIT license. Credits \u00b6 Author: Jiyang Chu","title":"Home"},{"location":"#welcome-to-auguri-docs","text":"This is the documentation for project Auguri .","title":"Welcome to Auguri Docs"},{"location":"#install","text":"Access permission to Auguri source code is required. git clone git@github.com:Auguri/auguri.git pip install ./auguri","title":"Install"},{"location":"#basic-usages","text":"import auguri # helper functions in auguri.crypto and auguri.equity symbols = auguri . equity . get_symbols () exchanges = auguri . equity . get_exchanges () # core class auguri.Ticker provides many data acquisition methods ticker = auguri . Ticker ( 'AAPL' ) history = ticker . history ()","title":"Basic Usages"},{"location":"#code-references","text":"Crypto Equity Ticker","title":"Code References"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"#credits","text":"Author: Jiyang Chu","title":"Credits"},{"location":"crypto/","text":"Module crypto \u00b6 \u00b6 get_daily ( symbol , start = None , end = None ) \u00b6 Get daily history data of the cryptocurrency symbol in the date range. Parameters: Name Type Description Default symbol str Standard cryptocurrency symbol. Not exchange pairs. required start str Start date of history with format '%Y-%m-%d'. Will be max history if None. Defaults to None. None end str End date of history with format '%Y-%m-%d'. Will be yesterday if None. Defaults to None. None Returns: Type Description DataFrame DataFrame: Cryptocurrency daily data sorted by date. get_top_coins () \u00b6 Get all available cryptocurrency symbols. Returns: Type Description DataFrame DataFrame: Standard cryptocurrency symbols and names. reset_stock_data_path ( path = './cryptodata' ) \u00b6 Reset the path to the folder storing cryptocurrency data. The path can be relative or absolute. Parameters: Name Type Description Default path str The path to the cryptocurrency data folder. Defaults to './cryptodata'. './cryptodata'","title":"Crypto"},{"location":"crypto/#module-crypto","text":"","title":"Module crypto"},{"location":"crypto/#auguri.crypto","text":"","title":"auguri.crypto"},{"location":"crypto/#auguri.crypto.get_daily","text":"Get daily history data of the cryptocurrency symbol in the date range. Parameters: Name Type Description Default symbol str Standard cryptocurrency symbol. Not exchange pairs. required start str Start date of history with format '%Y-%m-%d'. Will be max history if None. Defaults to None. None end str End date of history with format '%Y-%m-%d'. Will be yesterday if None. Defaults to None. None Returns: Type Description DataFrame DataFrame: Cryptocurrency daily data sorted by date.","title":"get_daily()"},{"location":"crypto/#auguri.crypto.get_top_coins","text":"Get all available cryptocurrency symbols. Returns: Type Description DataFrame DataFrame: Standard cryptocurrency symbols and names.","title":"get_top_coins()"},{"location":"crypto/#auguri.crypto.reset_stock_data_path","text":"Reset the path to the folder storing cryptocurrency data. The path can be relative or absolute. Parameters: Name Type Description Default path str The path to the cryptocurrency data folder. Defaults to './cryptodata'. './cryptodata'","title":"reset_stock_data_path()"},{"location":"equity/","text":"Module equity \u00b6 \u00b6 filter_stocks ( filter , size = None ) \u00b6 Apply the given filter to screen stocks. Parameters: Name Type Description Default filter str Filter name. required size int If set, limit the maximum size of the result. Defaults to None. None Returns: Type Description Dict Dict: [description] get_exchanges () \u00b6 Get all available exchanges. Returns: Type Description DataFrame DataFrame: Exchanges and related information. get_filters () \u00b6 Get a list of filters that can be applied to filter stocks. Returns: Type Description List[str] List[str]: A list of usable filters. get_symbols () \u00b6 Get all available symbols. Returns: Type Description DataFrame DataFrame: Symbols and related information. get_ticker ( symbol ) \u00b6 Get the Ticker of the given symbol. Parameters: Name Type Description Default symbol str Symbol of the stock. required Returns: Type Description Ticker Ticker: Ticker of the stock. reset_stock_data_path ( path = './stockdata' ) \u00b6 Reset the path to the folder storing stock data. The path can be relative or absolute. Parameters: Name Type Description Default path str The path to the stock data folder. Defaults to './stockdata'. './stockdata'","title":"Equity"},{"location":"equity/#module-equity","text":"","title":"Module equity"},{"location":"equity/#auguri.equity","text":"","title":"auguri.equity"},{"location":"equity/#auguri.equity.filter_stocks","text":"Apply the given filter to screen stocks. Parameters: Name Type Description Default filter str Filter name. required size int If set, limit the maximum size of the result. Defaults to None. None Returns: Type Description Dict Dict: [description]","title":"filter_stocks()"},{"location":"equity/#auguri.equity.get_exchanges","text":"Get all available exchanges. Returns: Type Description DataFrame DataFrame: Exchanges and related information.","title":"get_exchanges()"},{"location":"equity/#auguri.equity.get_filters","text":"Get a list of filters that can be applied to filter stocks. Returns: Type Description List[str] List[str]: A list of usable filters.","title":"get_filters()"},{"location":"equity/#auguri.equity.get_symbols","text":"Get all available symbols. Returns: Type Description DataFrame DataFrame: Symbols and related information.","title":"get_symbols()"},{"location":"equity/#auguri.equity.get_ticker","text":"Get the Ticker of the given symbol. Parameters: Name Type Description Default symbol str Symbol of the stock. required Returns: Type Description Ticker Ticker: Ticker of the stock.","title":"get_ticker()"},{"location":"equity/#auguri.equity.reset_stock_data_path","text":"Reset the path to the folder storing stock data. The path can be relative or absolute. Parameters: Name Type Description Default path str The path to the stock data folder. Defaults to './stockdata'. './stockdata'","title":"reset_stock_data_path()"},{"location":"ticker/","text":"Class Ticker \u00b6 \u00b6 The abstruct data container of a symbol. __init__ ( self , symbol ) special \u00b6 Initialize the Ticker with the given symbol. Parameters: Name Type Description Default symbol str Symbol of the target Ticker. required balance_sheet ( self , frequency ) \u00b6 Balance sheet data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Balance sheet. calendar_events ( self ) \u00b6 Earnings and Revenue expectations for upcoming earnings date of the symbol. Returns: Type Description Dict Dict: Calendar events. cash_flow ( self , frequency ) \u00b6 Cash flow data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Cash flow data. company_officers ( self ) \u00b6 Retrieves top executives of the symbol and their total pay. Returns: Type Description DataFrame DataFrame: Officers information. corporate_events ( self ) \u00b6 Significant corporate events related to the symbol. Returns: Type Description DataFrame DataFrame: Significant corporate events. earnings ( self ) \u00b6 Recent earnings data of the symbol. Returns: Type Description Dict Dict: Earnings data. earnings_diff ( self ) \u00b6 Recent earnings data of the symbol with comparison between actual and estimate. Returns: Type Description DataFrame DataFrame: Earnings data comparison table. earnings_trend ( self ) \u00b6 Historical earnings trend data and revenue estimations of the symbol. Returns: Type Description List[Dict] List[Dict]: Earnings trend data. financial_data ( self ) \u00b6 Financial KPIs of the symbol. Returns: Type Description Dict Dict: Financial KPIs. fund_holding_info ( self ) \u00b6 Contains information for a funds top holdings, bond ratings, bond holdings, equity holdings, sector weightings, and category breakdown. Returns: Type Description Dict Dict: Fund holding data. Note This function will only return data for funds and ETFs. fund_performance ( self ) \u00b6 Historical return data of the fund and its specific category. Returns: Type Description Dict Dict: Fund performance data. Note This function will only return data for funds and ETFs. fund_profile ( self ) \u00b6 Summary level information of a fund. Returns: Type Description Dict Dict: Profile data. Note This function will only return data for funds and ETFs. fund_sector_weightings ( self ) \u00b6 Retrieves aggregated sector weightings of the fund. Returns: Type Description DataFrame Dict: Sector weightings data. Note This function will only return data for funds and ETFs. fund_top_holdings ( self ) \u00b6 Retrieves top 10 holdings of the fund. Returns: Type Description DataFrame Dict: Top 10 holdings. Note This function will only return data for funds and ETFs. grading_history ( self ) \u00b6 Data related to upgrades / downgrades by firms. Returns: Type Description DataFrame DataFrame: Grading history data. history ( self , period = 'max' , interval = '1d' , start = None , end = None , ** kwargs ) \u00b6 Query the historical technical data of the symbol with period and sample interval. Parameters: Name Type Description Default period str One of '1d' | '5d' | '7d' | '60d' | '1mo' | '3mo' | '6mo' | '1y' | '2y' | '5y' | '10y' | 'ytd' | 'max'. Defaults to 'max'. 'max' interval str One of '1m' | '2m' | '5m' | '15m' | '30m' | '60m' | '90m' | '1h' | '1d' | '5d' | '1wk' | '1mo' | '3mo'. Defaults to '1d'. '1d' start str or datetime.datetime Start date of history. String parsed as '%Y-%m-%d'. Defaults to None. None end str or datetime.datetime End date of history. String parsed as '%Y-%m-%d'. Defaults to None. None Returns: Type Description DataFrame DataFrame: The historical technical data of the symbol. income_statement ( self , frequency ) \u00b6 Income statement data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Income statement data. index_trend ( self ) \u00b6 Trend data related the symbol's index, specificially PE and PEG ratios. Returns: Type Description Dict Dict: Index trend data. insider_holders ( self ) \u00b6 Data related to stock holdings of the symbol's insiders. Returns: Type Description DataFrame DataFrame: Insider holders data. insider_transactions ( self ) \u00b6 Transactions by the insiders of the symbol. Returns: Type Description DataFrame DataFrame: Insider transactions data. institution_ownership ( self ) \u00b6 Top 10 institution owners of the symbol. Returns: Type Description DataFrame DataFrame: Owners data. key_stats ( self ) \u00b6 KPIs of the symbol (PE, enterprise value, EPS, EBITA, etc.). Returns: Type Description Dict Dict: KPIs. major_holders ( self ) \u00b6 Data showing percentage of insiders, institutions, etc. Returns: Type Description Dict Dict: Major holders data. news ( self ) \u00b6 Get news headline and summary information of the symbol. Returns: Type Description List[Dict] List[Dict]: News. option_chain ( self ) \u00b6 View option chain data for all expiration dates of the symbol. Returns: Type Description DataFrame DataFrame: Option chain data. organization_ownership ( self ) \u00b6 Top 10 fund owners of the symbol. Returns: Type Description DataFrame DataFrame: Owners data. peers ( self ) \u00b6 Query peer symbols with correlation scores. Returns: Type Description List[Dict] List[Dict]: With format like [{'symbol': symbol, 'score': score}]. price ( self ) \u00b6 Detailed pricing related data of the symbol. Returns: Type Description Dict Dict: Detailed pricing related data. quote ( self ) \u00b6 Get real-time quote information of the symbol. Returns: Type Description Dict Dict: Quote information. quote_type ( self ) \u00b6 Stock exchange specific data of the quote of the symbol. Returns: Type Description Dict Dict: Quote type information. recommendation_trend ( self ) \u00b6 Data related to historical recommendations (buy, hold, sell) of the symbol. Returns: Type Description DataFrame DataFrame: Historical recommendations data. sec_filings ( self ) \u00b6 Historical SEC filings of the symbol. Returns: Type Description DataFrame DataFrame: Historical SEC filings. share_purchase_activity ( self ) \u00b6 High-level buy / sell data of the symbol. Returns: Type Description Dict Dict: High-level buy / sell data. summary ( self ) \u00b6 Contains the summary information of the symbol. Returns: Type Description Dict Dict: Summary information. technical_insights ( self ) \u00b6 Technical indicators of the symbol. Returns: Type Description Dict Dict: Technical indicators. trend_views ( self ) \u00b6 Short, Mid, and Long-term trend data of the symbol. Returns: Type Description Dict Dict: Trend data. valuation_measures ( self ) \u00b6 Valuation measures for most recent four quarters as well as the most recent date. Returns: Type Description DataFrame DataFrame: Valuation measures data.","title":"Ticker"},{"location":"ticker/#class-ticker","text":"","title":"Class Ticker"},{"location":"ticker/#auguri.ticker.Ticker","text":"The abstruct data container of a symbol.","title":"auguri.ticker.Ticker"},{"location":"ticker/#auguri.ticker.Ticker.__init__","text":"Initialize the Ticker with the given symbol. Parameters: Name Type Description Default symbol str Symbol of the target Ticker. required","title":"__init__()"},{"location":"ticker/#auguri.ticker.Ticker.balance_sheet","text":"Balance sheet data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Balance sheet.","title":"balance_sheet()"},{"location":"ticker/#auguri.ticker.Ticker.calendar_events","text":"Earnings and Revenue expectations for upcoming earnings date of the symbol. Returns: Type Description Dict Dict: Calendar events.","title":"calendar_events()"},{"location":"ticker/#auguri.ticker.Ticker.cash_flow","text":"Cash flow data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Cash flow data.","title":"cash_flow()"},{"location":"ticker/#auguri.ticker.Ticker.company_officers","text":"Retrieves top executives of the symbol and their total pay. Returns: Type Description DataFrame DataFrame: Officers information.","title":"company_officers()"},{"location":"ticker/#auguri.ticker.Ticker.corporate_events","text":"Significant corporate events related to the symbol. Returns: Type Description DataFrame DataFrame: Significant corporate events.","title":"corporate_events()"},{"location":"ticker/#auguri.ticker.Ticker.earnings","text":"Recent earnings data of the symbol. Returns: Type Description Dict Dict: Earnings data.","title":"earnings()"},{"location":"ticker/#auguri.ticker.Ticker.earnings_diff","text":"Recent earnings data of the symbol with comparison between actual and estimate. Returns: Type Description DataFrame DataFrame: Earnings data comparison table.","title":"earnings_diff()"},{"location":"ticker/#auguri.ticker.Ticker.earnings_trend","text":"Historical earnings trend data and revenue estimations of the symbol. Returns: Type Description List[Dict] List[Dict]: Earnings trend data.","title":"earnings_trend()"},{"location":"ticker/#auguri.ticker.Ticker.financial_data","text":"Financial KPIs of the symbol. Returns: Type Description Dict Dict: Financial KPIs.","title":"financial_data()"},{"location":"ticker/#auguri.ticker.Ticker.fund_holding_info","text":"Contains information for a funds top holdings, bond ratings, bond holdings, equity holdings, sector weightings, and category breakdown. Returns: Type Description Dict Dict: Fund holding data. Note This function will only return data for funds and ETFs.","title":"fund_holding_info()"},{"location":"ticker/#auguri.ticker.Ticker.fund_performance","text":"Historical return data of the fund and its specific category. Returns: Type Description Dict Dict: Fund performance data. Note This function will only return data for funds and ETFs.","title":"fund_performance()"},{"location":"ticker/#auguri.ticker.Ticker.fund_profile","text":"Summary level information of a fund. Returns: Type Description Dict Dict: Profile data. Note This function will only return data for funds and ETFs.","title":"fund_profile()"},{"location":"ticker/#auguri.ticker.Ticker.fund_sector_weightings","text":"Retrieves aggregated sector weightings of the fund. Returns: Type Description DataFrame Dict: Sector weightings data. Note This function will only return data for funds and ETFs.","title":"fund_sector_weightings()"},{"location":"ticker/#auguri.ticker.Ticker.fund_top_holdings","text":"Retrieves top 10 holdings of the fund. Returns: Type Description DataFrame Dict: Top 10 holdings. Note This function will only return data for funds and ETFs.","title":"fund_top_holdings()"},{"location":"ticker/#auguri.ticker.Ticker.grading_history","text":"Data related to upgrades / downgrades by firms. Returns: Type Description DataFrame DataFrame: Grading history data.","title":"grading_history()"},{"location":"ticker/#auguri.ticker.Ticker.history","text":"Query the historical technical data of the symbol with period and sample interval. Parameters: Name Type Description Default period str One of '1d' | '5d' | '7d' | '60d' | '1mo' | '3mo' | '6mo' | '1y' | '2y' | '5y' | '10y' | 'ytd' | 'max'. Defaults to 'max'. 'max' interval str One of '1m' | '2m' | '5m' | '15m' | '30m' | '60m' | '90m' | '1h' | '1d' | '5d' | '1wk' | '1mo' | '3mo'. Defaults to '1d'. '1d' start str or datetime.datetime Start date of history. String parsed as '%Y-%m-%d'. Defaults to None. None end str or datetime.datetime End date of history. String parsed as '%Y-%m-%d'. Defaults to None. None Returns: Type Description DataFrame DataFrame: The historical technical data of the symbol.","title":"history()"},{"location":"ticker/#auguri.ticker.Ticker.income_statement","text":"Income statement data for most recent four quarters or four years. Parameters: Name Type Description Default frequency str Display either quarterly ('q') or annual ('a') data. required Returns: Type Description DataFrame DataFrame: Income statement data.","title":"income_statement()"},{"location":"ticker/#auguri.ticker.Ticker.index_trend","text":"Trend data related the symbol's index, specificially PE and PEG ratios. Returns: Type Description Dict Dict: Index trend data.","title":"index_trend()"},{"location":"ticker/#auguri.ticker.Ticker.insider_holders","text":"Data related to stock holdings of the symbol's insiders. Returns: Type Description DataFrame DataFrame: Insider holders data.","title":"insider_holders()"},{"location":"ticker/#auguri.ticker.Ticker.insider_transactions","text":"Transactions by the insiders of the symbol. Returns: Type Description DataFrame DataFrame: Insider transactions data.","title":"insider_transactions()"},{"location":"ticker/#auguri.ticker.Ticker.institution_ownership","text":"Top 10 institution owners of the symbol. Returns: Type Description DataFrame DataFrame: Owners data.","title":"institution_ownership()"},{"location":"ticker/#auguri.ticker.Ticker.key_stats","text":"KPIs of the symbol (PE, enterprise value, EPS, EBITA, etc.). Returns: Type Description Dict Dict: KPIs.","title":"key_stats()"},{"location":"ticker/#auguri.ticker.Ticker.major_holders","text":"Data showing percentage of insiders, institutions, etc. Returns: Type Description Dict Dict: Major holders data.","title":"major_holders()"},{"location":"ticker/#auguri.ticker.Ticker.news","text":"Get news headline and summary information of the symbol. Returns: Type Description List[Dict] List[Dict]: News.","title":"news()"},{"location":"ticker/#auguri.ticker.Ticker.option_chain","text":"View option chain data for all expiration dates of the symbol. Returns: Type Description DataFrame DataFrame: Option chain data.","title":"option_chain()"},{"location":"ticker/#auguri.ticker.Ticker.organization_ownership","text":"Top 10 fund owners of the symbol. Returns: Type Description DataFrame DataFrame: Owners data.","title":"organization_ownership()"},{"location":"ticker/#auguri.ticker.Ticker.peers","text":"Query peer symbols with correlation scores. Returns: Type Description List[Dict] List[Dict]: With format like [{'symbol': symbol, 'score': score}].","title":"peers()"},{"location":"ticker/#auguri.ticker.Ticker.price","text":"Detailed pricing related data of the symbol. Returns: Type Description Dict Dict: Detailed pricing related data.","title":"price()"},{"location":"ticker/#auguri.ticker.Ticker.quote","text":"Get real-time quote information of the symbol. Returns: Type Description Dict Dict: Quote information.","title":"quote()"},{"location":"ticker/#auguri.ticker.Ticker.quote_type","text":"Stock exchange specific data of the quote of the symbol. Returns: Type Description Dict Dict: Quote type information.","title":"quote_type()"},{"location":"ticker/#auguri.ticker.Ticker.recommendation_trend","text":"Data related to historical recommendations (buy, hold, sell) of the symbol. Returns: Type Description DataFrame DataFrame: Historical recommendations data.","title":"recommendation_trend()"},{"location":"ticker/#auguri.ticker.Ticker.sec_filings","text":"Historical SEC filings of the symbol. Returns: Type Description DataFrame DataFrame: Historical SEC filings.","title":"sec_filings()"},{"location":"ticker/#auguri.ticker.Ticker.share_purchase_activity","text":"High-level buy / sell data of the symbol. Returns: Type Description Dict Dict: High-level buy / sell data.","title":"share_purchase_activity()"},{"location":"ticker/#auguri.ticker.Ticker.summary","text":"Contains the summary information of the symbol. Returns: Type Description Dict Dict: Summary information.","title":"summary()"},{"location":"ticker/#auguri.ticker.Ticker.technical_insights","text":"Technical indicators of the symbol. Returns: Type Description Dict Dict: Technical indicators.","title":"technical_insights()"},{"location":"ticker/#auguri.ticker.Ticker.trend_views","text":"Short, Mid, and Long-term trend data of the symbol. Returns: Type Description Dict Dict: Trend data.","title":"trend_views()"},{"location":"ticker/#auguri.ticker.Ticker.valuation_measures","text":"Valuation measures for most recent four quarters as well as the most recent date. Returns: Type Description DataFrame DataFrame: Valuation measures data.","title":"valuation_measures()"}]}